"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterAnimationControllerFactory = FilterAnimationControllerFactory;
exports.LayerAnimationControllerFactory = LayerAnimationControllerFactory;
exports["default"] = BottomWidgetFactory;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));

var _defaultSettings = require("../constants/default-settings");

var _filterUtils = require("../utils/filter-utils");

var _templateObject;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var propTypes = {
  filters: _propTypes["default"].arrayOf(_propTypes["default"].object),
  datasets: _propTypes["default"].object,
  uiState: _propTypes["default"].object,
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object),
  animationConfig: _propTypes["default"].object,
  visStateActions: _propTypes["default"].object,
  sidePanelWidth: _propTypes["default"].number,
  containerW: _propTypes["default"].number
};
var maxWidth = 1080;

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  width: ", "px;\n  bottom: 0;\n  right: 0;\n  z-index: 1;\n"])), function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingTop : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingRight : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingBottom : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingLeft : 0;
}, function (props) {
  return props.width;
});

FilterAnimationControllerFactory.deps = [_animationController["default"]];

function FilterAnimationControllerFactory(AnimationController) {
  var FilterAnimationController = function FilterAnimationController(_ref) {
    var filter = _ref.filter,
        filterIdx = _ref.filterIdx,
        setFilterAnimationTime = _ref.setFilterAnimationTime,
        children = _ref.children;
    var intervalBins = (0, _react.useMemo)(function () {
      return (0, _filterUtils.getIntervalBins)(filter);
    }, [filter]);
    var steps = (0, _react.useMemo)(function () {
      return intervalBins ? intervalBins.map(function (x) {
        return x.x0;
      }) : null;
    }, [intervalBins]);
    var updateAnimation = (0, _react.useCallback)(function (value) {
      switch (filter.animationWindow) {
        case _defaultSettings.ANIMATION_WINDOW.interval:
          var idx = value[1];
          setFilterAnimationTime(filterIdx, 'value', [intervalBins[idx].x0, intervalBins[idx].x1 - 1]);
          break;

        default:
          setFilterAnimationTime(filterIdx, 'value', value);
          break;
      }
    }, [filterIdx, intervalBins, filter.animationWindow, setFilterAnimationTime]);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "filter-control",
      value: filter.value,
      domain: filter.domain,
      speed: filter.speed,
      isAnimating: filter.isAnimating,
      animationWindow: filter.animationWindow,
      steps: steps,
      updateAnimation: updateAnimation,
      children: children
    });
  };

  return FilterAnimationController;
}

LayerAnimationControllerFactory.deps = [_animationController["default"]];

function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref2) {
    var animationConfig = _ref2.animationConfig,
        setLayerAnimationTime = _ref2.setLayerAnimationTime,
        children = _ref2.children;
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: animationConfig.currentTime,
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      updateAnimation: setLayerAnimationTime,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _defaultSettings.ANIMATION_WINDOW.interval : _defaultSettings.ANIMATION_WINDOW.point,
      children: children
    });
  };

  return LayerAnimationController;
}

BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"], FilterAnimationControllerFactory, LayerAnimationControllerFactory];

function BottomWidgetFactory(TimeWidget, AnimationControl, FilterAnimationController, LayerAnimationController) {
  var BottomWidget = function BottomWidget(props) {
    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.enlarged && f.type === _defaultSettings.FILTER_TYPES.timeRange;
      });
    }, [filters]);
    var animatedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.isAnimating;
      });
    }, [filters]);
    var animatedFilter = animatedFilterIdx > -1 ? filters[animatedFilterIdx] : null;
    var enlargedFilterWidth = isOpen ? containerW - sidePanelWidth : containerW; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatableLayer = (0, _react.useMemo)(function () {
      return layers.filter(function (l) {
        return l.config.animation && l.config.animation.enabled && l.config.isVisible;
      });
    }, [layers]);
    var readyToAnimation = Array.isArray(animationConfig.domain) && Number.isFinite(animationConfig.currentTime); // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatableLayer.length;
    var showAnimationControl = animatableLayer.length && readyToAnimation;
    var showTimeWidget = enlargedFilterIdx > -1 && Object.keys(datasets).length > 0; // if filter is not animating, pass in enlarged filter here because
    // animation controller needs to call reset on it

    var filter = animatedFilter || filters[enlargedFilterIdx];
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      className: "bottom-widget--container",
      hasPadding: showAnimationControl || showTimeWidget
    }, /*#__PURE__*/_react["default"].createElement(LayerAnimationController, {
      animationConfig: animationConfig,
      setLayerAnimationTime: visStateActions.setLayerAnimationTime
    }, function (isAnimating, start, pause, reset) {
      return showAnimationControl ? /*#__PURE__*/_react["default"].createElement(AnimationControl, {
        animationConfig: animationConfig,
        setLayerAnimationTime: visStateActions.setLayerAnimationTime,
        updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed,
        toggleAnimation: visStateActions.toggleLayerAnimation,
        isAnimatable: !animatedFilter,
        isAnimating: isAnimating,
        resetAnimation: reset
      }) : null;
    }), filter && /*#__PURE__*/_react["default"].createElement(FilterAnimationController, {
      filter: filter,
      filterIdx: animatedFilterIdx > -1 ? animatedFilterIdx : enlargedFilterIdx,
      setFilterAnimationTime: visStateActions.setFilterAnimationTime
    }, function (isAnimating, start, pause, resetAnimation) {
      return showTimeWidget ? /*#__PURE__*/_react["default"].createElement(TimeWidget // TimeWidget uses React.memo, here we pass width
      // even though it doesnt use it, to force rerender
      , {
        width: enlargedFilterWidth,
        filter: filters[enlargedFilterIdx],
        index: enlargedFilterIdx,
        isAnyFilterAnimating: Boolean(animatedFilter),
        datasets: datasets,
        readOnly: readOnly,
        showTimeDisplay: showFloatingTimeDisplay,
        setFilterPlot: visStateActions.setFilterPlot,
        setFilter: visStateActions.setFilter,
        setFilterAnimationTime: visStateActions.setFilterAnimationTime,
        setFilterAnimationWindow: visStateActions.setFilterAnimationWindow,
        toggleAnimation: visStateActions.toggleFilterAnimation,
        updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
        enlargeFilter: visStateActions.enlargeFilter,
        resetAnimation: resetAnimation,
        isAnimatable: !animationConfig || !animationConfig.isAnimating
      }) : null;
    }));
  };

  BottomWidget.propTypes = propTypes;
  return BottomWidget;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL2JvdHRvbS13aWRnZXQuanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwiZmlsdGVycyIsIlByb3BUeXBlcyIsImFycmF5T2YiLCJvYmplY3QiLCJkYXRhc2V0cyIsInVpU3RhdGUiLCJsYXllcnMiLCJhbmltYXRpb25Db25maWciLCJ2aXNTdGF0ZUFjdGlvbnMiLCJzaWRlUGFuZWxXaWR0aCIsIm51bWJlciIsImNvbnRhaW5lclciLCJtYXhXaWR0aCIsIkJvdHRvbVdpZGdldENvbnRhaW5lciIsInN0eWxlZCIsImRpdiIsInByb3BzIiwiaGFzUGFkZGluZyIsInRoZW1lIiwiYm90dG9tV2lkZ2V0UGFkZGluZ1RvcCIsImJvdHRvbVdpZGdldFBhZGRpbmdSaWdodCIsImJvdHRvbVdpZGdldFBhZGRpbmdCb3R0b20iLCJib3R0b21XaWRnZXRQYWRkaW5nTGVmdCIsIndpZHRoIiwiRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkiLCJkZXBzIiwiQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkiLCJBbmltYXRpb25Db250cm9sbGVyIiwiRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlciIsImZpbHRlciIsImZpbHRlcklkeCIsInNldEZpbHRlckFuaW1hdGlvblRpbWUiLCJjaGlsZHJlbiIsImludGVydmFsQmlucyIsInN0ZXBzIiwibWFwIiwieCIsIngwIiwidXBkYXRlQW5pbWF0aW9uIiwidmFsdWUiLCJhbmltYXRpb25XaW5kb3ciLCJBTklNQVRJT05fV0lORE9XIiwiaW50ZXJ2YWwiLCJpZHgiLCJ4MSIsImRvbWFpbiIsInNwZWVkIiwiaXNBbmltYXRpbmciLCJMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IiwiTGF5ZXJBbmltYXRpb25Db250cm9sbGVyIiwic2V0TGF5ZXJBbmltYXRpb25UaW1lIiwiY3VycmVudFRpbWUiLCJ0aW1lU3RlcHMiLCJwb2ludCIsIkJvdHRvbVdpZGdldEZhY3RvcnkiLCJUaW1lV2lkZ2V0RmFjdG9yeSIsIkFuaW1hdGlvbkNvbnRyb2xGYWN0b3J5IiwiVGltZVdpZGdldCIsIkFuaW1hdGlvbkNvbnRyb2wiLCJCb3R0b21XaWRnZXQiLCJhY3RpdmVTaWRlUGFuZWwiLCJyZWFkT25seSIsImlzT3BlbiIsIkJvb2xlYW4iLCJlbmxhcmdlZEZpbHRlcklkeCIsImZpbmRJbmRleCIsImYiLCJlbmxhcmdlZCIsInR5cGUiLCJGSUxURVJfVFlQRVMiLCJ0aW1lUmFuZ2UiLCJhbmltYXRlZEZpbHRlcklkeCIsImFuaW1hdGVkRmlsdGVyIiwiZW5sYXJnZWRGaWx0ZXJXaWR0aCIsImFuaW1hdGFibGVMYXllciIsImwiLCJjb25maWciLCJhbmltYXRpb24iLCJlbmFibGVkIiwiaXNWaXNpYmxlIiwicmVhZHlUb0FuaW1hdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsIk51bWJlciIsImlzRmluaXRlIiwic2hvd0Zsb2F0aW5nVGltZURpc3BsYXkiLCJsZW5ndGgiLCJzaG93QW5pbWF0aW9uQ29udHJvbCIsInNob3dUaW1lV2lkZ2V0IiwiT2JqZWN0Iiwia2V5cyIsIk1hdGgiLCJtaW4iLCJzdGFydCIsInBhdXNlIiwicmVzZXQiLCJ1cGRhdGVMYXllckFuaW1hdGlvblNwZWVkIiwidG9nZ2xlTGF5ZXJBbmltYXRpb24iLCJyZXNldEFuaW1hdGlvbiIsInNldEZpbHRlclBsb3QiLCJzZXRGaWx0ZXIiLCJzZXRGaWx0ZXJBbmltYXRpb25XaW5kb3ciLCJ0b2dnbGVGaWx0ZXJBbmltYXRpb24iLCJ1cGRhdGVGaWx0ZXJBbmltYXRpb25TcGVlZCIsImVubGFyZ2VGaWx0ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLE9BQU8sRUFBRUMsc0JBQVVDLE9BQVYsQ0FBa0JELHNCQUFVRSxNQUE1QixDQURPO0FBRWhCQyxFQUFBQSxR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ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMSBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrLCB1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgVGltZVdpZGdldEZhY3RvcnkgZnJvbSAnLi9maWx0ZXJzL3RpbWUtd2lkZ2V0JztcbmltcG9ydCBBbmltYXRpb25Db250cm9sRmFjdG9yeSBmcm9tICcuL2NvbW1vbi9hbmltYXRpb24tY29udHJvbC9hbmltYXRpb24tY29udHJvbCc7XG5pbXBvcnQgQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkgZnJvbSAnLi9jb21tb24vYW5pbWF0aW9uLWNvbnRyb2wvYW5pbWF0aW9uLWNvbnRyb2xsZXInO1xuaW1wb3J0IHtBTklNQVRJT05fV0lORE9XLCBGSUxURVJfVFlQRVN9IGZyb20gJ2NvbnN0YW50cy9kZWZhdWx0LXNldHRpbmdzJztcbmltcG9ydCB7Z2V0SW50ZXJ2YWxCaW5zfSBmcm9tICd1dGlscy9maWx0ZXItdXRpbHMnO1xuXG5jb25zdCBwcm9wVHlwZXMgPSB7XG4gIGZpbHRlcnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vYmplY3QpLFxuICBkYXRhc2V0czogUHJvcFR5cGVzLm9iamVjdCxcbiAgdWlTdGF0ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgbGF5ZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KSxcbiAgYW5pbWF0aW9uQ29uZmlnOiBQcm9wVHlwZXMub2JqZWN0LFxuICB2aXNTdGF0ZUFjdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gIHNpZGVQYW5lbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjb250YWluZXJXOiBQcm9wVHlwZXMubnVtYmVyXG59O1xuXG5jb25zdCBtYXhXaWR0aCA9IDEwODA7XG5cbmNvbnN0IEJvdHRvbVdpZGdldENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZy10b3A6ICR7cHJvcHMgPT4gKHByb3BzLmhhc1BhZGRpbmcgPyBwcm9wcy50aGVtZS5ib3R0b21XaWRnZXRQYWRkaW5nVG9wIDogMCl9cHg7XG4gIHBhZGRpbmctcmlnaHQ6ICR7cHJvcHMgPT4gKHByb3BzLmhhc1BhZGRpbmcgPyBwcm9wcy50aGVtZS5ib3R0b21XaWRnZXRQYWRkaW5nUmlnaHQgOiAwKX1weDtcbiAgcGFkZGluZy1ib3R0b206ICR7cHJvcHMgPT4gKHByb3BzLmhhc1BhZGRpbmcgPyBwcm9wcy50aGVtZS5ib3R0b21XaWRnZXRQYWRkaW5nQm90dG9tIDogMCl9cHg7XG4gIHBhZGRpbmctbGVmdDogJHtwcm9wcyA9PiAocHJvcHMuaGFzUGFkZGluZyA/IHByb3BzLnRoZW1lLmJvdHRvbVdpZGdldFBhZGRpbmdMZWZ0IDogMCl9cHg7XG4gIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLndpZHRofXB4O1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICB6LWluZGV4OiAxO1xuYDtcblxuRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkuZGVwcyA9IFtBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeV07XG5leHBvcnQgZnVuY3Rpb24gRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkoQW5pbWF0aW9uQ29udHJvbGxlcikge1xuICBjb25zdCBGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyID0gKHtmaWx0ZXIsIGZpbHRlcklkeCwgc2V0RmlsdGVyQW5pbWF0aW9uVGltZSwgY2hpbGRyZW59KSA9PiB7XG4gICAgY29uc3QgaW50ZXJ2YWxCaW5zID0gdXNlTWVtbygoKSA9PiBnZXRJbnRlcnZhbEJpbnMoZmlsdGVyKSwgW2ZpbHRlcl0pO1xuXG4gICAgY29uc3Qgc3RlcHMgPSB1c2VNZW1vKCgpID0+IChpbnRlcnZhbEJpbnMgPyBpbnRlcnZhbEJpbnMubWFwKHggPT4geC54MCkgOiBudWxsKSwgW1xuICAgICAgaW50ZXJ2YWxCaW5zXG4gICAgXSk7XG5cbiAgICBjb25zdCB1cGRhdGVBbmltYXRpb24gPSB1c2VDYWxsYmFjayhcbiAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgc3dpdGNoIChmaWx0ZXIuYW5pbWF0aW9uV2luZG93KSB7XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fV0lORE9XLmludGVydmFsOlxuICAgICAgICAgICAgY29uc3QgaWR4ID0gdmFsdWVbMV07XG4gICAgICAgICAgICBzZXRGaWx0ZXJBbmltYXRpb25UaW1lKGZpbHRlcklkeCwgJ3ZhbHVlJywgW1xuICAgICAgICAgICAgICBpbnRlcnZhbEJpbnNbaWR4XS54MCxcbiAgICAgICAgICAgICAgaW50ZXJ2YWxCaW5zW2lkeF0ueDEgLSAxXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzZXRGaWx0ZXJBbmltYXRpb25UaW1lKGZpbHRlcklkeCwgJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbZmlsdGVySWR4LCBpbnRlcnZhbEJpbnMsIGZpbHRlci5hbmltYXRpb25XaW5kb3csIHNldEZpbHRlckFuaW1hdGlvblRpbWVdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0aW9uQ29udHJvbGxlclxuICAgICAgICBrZXk9XCJmaWx0ZXItY29udHJvbFwiXG4gICAgICAgIHZhbHVlPXtmaWx0ZXIudmFsdWV9XG4gICAgICAgIGRvbWFpbj17ZmlsdGVyLmRvbWFpbn1cbiAgICAgICAgc3BlZWQ9e2ZpbHRlci5zcGVlZH1cbiAgICAgICAgaXNBbmltYXRpbmc9e2ZpbHRlci5pc0FuaW1hdGluZ31cbiAgICAgICAgYW5pbWF0aW9uV2luZG93PXtmaWx0ZXIuYW5pbWF0aW9uV2luZG93fVxuICAgICAgICBzdGVwcz17c3RlcHN9XG4gICAgICAgIHVwZGF0ZUFuaW1hdGlvbj17dXBkYXRlQW5pbWF0aW9ufVxuICAgICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICAvPlxuICAgICk7XG4gIH07XG4gIHJldHVybiBGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyO1xufVxuXG5MYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5LmRlcHMgPSBbQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnldO1xuZXhwb3J0IGZ1bmN0aW9uIExheWVyQW5pbWF0aW9uQ29udHJvbGxlckZhY3RvcnkoQW5pbWF0aW9uQ29udHJvbGxlcikge1xuICBjb25zdCBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXIgPSAoe2FuaW1hdGlvbkNvbmZpZywgc2V0TGF5ZXJBbmltYXRpb25UaW1lLCBjaGlsZHJlbn0pID0+IChcbiAgICA8QW5pbWF0aW9uQ29udHJvbGxlclxuICAgICAga2V5PVwibGF5ZXItY29udHJvbFwiXG4gICAgICB2YWx1ZT17YW5pbWF0aW9uQ29uZmlnLmN1cnJlbnRUaW1lfVxuICAgICAgZG9tYWluPXthbmltYXRpb25Db25maWcuZG9tYWlufVxuICAgICAgc3BlZWQ9e2FuaW1hdGlvbkNvbmZpZy5zcGVlZH1cbiAgICAgIGlzQW5pbWF0aW5nPXthbmltYXRpb25Db25maWcuaXNBbmltYXRpbmd9XG4gICAgICB1cGRhdGVBbmltYXRpb249e3NldExheWVyQW5pbWF0aW9uVGltZX1cbiAgICAgIHN0ZXBzPXthbmltYXRpb25Db25maWcudGltZVN0ZXBzfVxuICAgICAgYW5pbWF0aW9uV2luZG93PXtcbiAgICAgICAgYW5pbWF0aW9uQ29uZmlnLnRpbWVTdGVwcyA/IEFOSU1BVElPTl9XSU5ET1cuaW50ZXJ2YWwgOiBBTklNQVRJT05fV0lORE9XLnBvaW50XG4gICAgICB9XG4gICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgLz5cbiAgKTtcbiAgcmV0dXJuIExheWVyQW5pbWF0aW9uQ29udHJvbGxlcjtcbn1cblxuQm90dG9tV2lkZ2V0RmFjdG9yeS5kZXBzID0gW1xuICBUaW1lV2lkZ2V0RmFjdG9yeSxcbiAgQW5pbWF0aW9uQ29udHJvbEZhY3RvcnksXG4gIEZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5LFxuICBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5XG5dO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQm90dG9tV2lkZ2V0RmFjdG9yeShcbiAgVGltZVdpZGdldCxcbiAgQW5pbWF0aW9uQ29udHJvbCxcbiAgRmlsdGVyQW5pbWF0aW9uQ29udHJvbGxlcixcbiAgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyXG4pIHtcbiAgY29uc3QgQm90dG9tV2lkZ2V0ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGFzZXRzLFxuICAgICAgZmlsdGVycyxcbiAgICAgIGFuaW1hdGlvbkNvbmZpZyxcbiAgICAgIHZpc1N0YXRlQWN0aW9ucyxcbiAgICAgIGNvbnRhaW5lclcsXG4gICAgICB1aVN0YXRlLFxuICAgICAgc2lkZVBhbmVsV2lkdGgsXG4gICAgICBsYXllcnNcbiAgICB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCB7YWN0aXZlU2lkZVBhbmVsLCByZWFkT25seX0gPSB1aVN0YXRlO1xuICAgIGNvbnN0IGlzT3BlbiA9IEJvb2xlYW4oYWN0aXZlU2lkZVBhbmVsKTtcblxuICAgIGNvbnN0IGVubGFyZ2VkRmlsdGVySWR4ID0gdXNlTWVtbyhcbiAgICAgICgpID0+IGZpbHRlcnMuZmluZEluZGV4KGYgPT4gZi5lbmxhcmdlZCAmJiBmLnR5cGUgPT09IEZJTFRFUl9UWVBFUy50aW1lUmFuZ2UpLFxuICAgICAgW2ZpbHRlcnNdXG4gICAgKTtcbiAgICBjb25zdCBhbmltYXRlZEZpbHRlcklkeCA9IHVzZU1lbW8oKCkgPT4gZmlsdGVycy5maW5kSW5kZXgoZiA9PiBmLmlzQW5pbWF0aW5nKSwgW2ZpbHRlcnNdKTtcbiAgICBjb25zdCBhbmltYXRlZEZpbHRlciA9IGFuaW1hdGVkRmlsdGVySWR4ID4gLTEgPyBmaWx0ZXJzW2FuaW1hdGVkRmlsdGVySWR4XSA6IG51bGw7XG5cbiAgICBjb25zdCBlbmxhcmdlZEZpbHRlcldpZHRoID0gaXNPcGVuID8gY29udGFpbmVyVyAtIHNpZGVQYW5lbFdpZHRoIDogY29udGFpbmVyVztcblxuICAgIC8vIHNob3cgcGxheWJhY2sgY29udHJvbCBpZiBsYXllcnMgY29udGFpbiB0cmlwIGxheWVyICYgYXQgbGVhc3Qgb25lIHRyaXAgbGF5ZXIgaXMgdmlzaWJsZVxuICAgIGNvbnN0IGFuaW1hdGFibGVMYXllciA9IHVzZU1lbW8oXG4gICAgICAoKSA9PlxuICAgICAgICBsYXllcnMuZmlsdGVyKGwgPT4gbC5jb25maWcuYW5pbWF0aW9uICYmIGwuY29uZmlnLmFuaW1hdGlvbi5lbmFibGVkICYmIGwuY29uZmlnLmlzVmlzaWJsZSksXG4gICAgICBbbGF5ZXJzXVxuICAgICk7XG5cbiAgICBjb25zdCByZWFkeVRvQW5pbWF0aW9uID1cbiAgICAgIEFycmF5LmlzQXJyYXkoYW5pbWF0aW9uQ29uZmlnLmRvbWFpbikgJiYgTnVtYmVyLmlzRmluaXRlKGFuaW1hdGlvbkNvbmZpZy5jdXJyZW50VGltZSk7XG4gICAgLy8gaWYgYW5pbWF0aW9uIGNvbnRyb2wgaXMgc2hvd2luZywgaGlkZSB0aW1lIGRpc3BsYXkgaW4gdGltZSBzbGlkZXJcbiAgICBjb25zdCBzaG93RmxvYXRpbmdUaW1lRGlzcGxheSA9ICFhbmltYXRhYmxlTGF5ZXIubGVuZ3RoO1xuICAgIGNvbnN0IHNob3dBbmltYXRpb25Db250cm9sID0gYW5pbWF0YWJsZUxheWVyLmxlbmd0aCAmJiByZWFkeVRvQW5pbWF0aW9uO1xuICAgIGNvbnN0IHNob3dUaW1lV2lkZ2V0ID0gZW5sYXJnZWRGaWx0ZXJJZHggPiAtMSAmJiBPYmplY3Qua2V5cyhkYXRhc2V0cykubGVuZ3RoID4gMDtcblxuICAgIC8vIGlmIGZpbHRlciBpcyBub3QgYW5pbWF0aW5nLCBwYXNzIGluIGVubGFyZ2VkIGZpbHRlciBoZXJlIGJlY2F1c2VcbiAgICAvLyBhbmltYXRpb24gY29udHJvbGxlciBuZWVkcyB0byBjYWxsIHJlc2V0IG9uIGl0XG4gICAgY29uc3QgZmlsdGVyID0gYW5pbWF0ZWRGaWx0ZXIgfHwgZmlsdGVyc1tlbmxhcmdlZEZpbHRlcklkeF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJvdHRvbVdpZGdldENvbnRhaW5lclxuICAgICAgICB3aWR0aD17TWF0aC5taW4obWF4V2lkdGgsIGVubGFyZ2VkRmlsdGVyV2lkdGgpfVxuICAgICAgICBjbGFzc05hbWU9XCJib3R0b20td2lkZ2V0LS1jb250YWluZXJcIlxuICAgICAgICBoYXNQYWRkaW5nPXtzaG93QW5pbWF0aW9uQ29udHJvbCB8fCBzaG93VGltZVdpZGdldH1cbiAgICAgID5cbiAgICAgICAgPExheWVyQW5pbWF0aW9uQ29udHJvbGxlclxuICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZz17YW5pbWF0aW9uQ29uZmlnfVxuICAgICAgICAgIHNldExheWVyQW5pbWF0aW9uVGltZT17dmlzU3RhdGVBY3Rpb25zLnNldExheWVyQW5pbWF0aW9uVGltZX1cbiAgICAgICAgPlxuICAgICAgICAgIHsoaXNBbmltYXRpbmcsIHN0YXJ0LCBwYXVzZSwgcmVzZXQpID0+XG4gICAgICAgICAgICBzaG93QW5pbWF0aW9uQ29udHJvbCA/IChcbiAgICAgICAgICAgICAgPEFuaW1hdGlvbkNvbnRyb2xcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Db25maWc9e2FuaW1hdGlvbkNvbmZpZ31cbiAgICAgICAgICAgICAgICBzZXRMYXllckFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy5zZXRMYXllckFuaW1hdGlvblRpbWV9XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uU3BlZWQ9e3Zpc1N0YXRlQWN0aW9ucy51cGRhdGVMYXllckFuaW1hdGlvblNwZWVkfVxuICAgICAgICAgICAgICAgIHRvZ2dsZUFuaW1hdGlvbj17dmlzU3RhdGVBY3Rpb25zLnRvZ2dsZUxheWVyQW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgIGlzQW5pbWF0YWJsZT17IWFuaW1hdGVkRmlsdGVyfVxuICAgICAgICAgICAgICAgIGlzQW5pbWF0aW5nPXtpc0FuaW1hdGluZ31cbiAgICAgICAgICAgICAgICByZXNldEFuaW1hdGlvbj17cmVzZXR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApIDogbnVsbFxuICAgICAgICAgIH1cbiAgICAgICAgPC9MYXllckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgIHtmaWx0ZXIgJiYgKFxuICAgICAgICAgIDxGaWx0ZXJBbmltYXRpb25Db250cm9sbGVyXG4gICAgICAgICAgICBmaWx0ZXI9e2ZpbHRlcn1cbiAgICAgICAgICAgIGZpbHRlcklkeD17YW5pbWF0ZWRGaWx0ZXJJZHggPiAtMSA/IGFuaW1hdGVkRmlsdGVySWR4IDogZW5sYXJnZWRGaWx0ZXJJZHh9XG4gICAgICAgICAgICBzZXRGaWx0ZXJBbmltYXRpb25UaW1lPXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyQW5pbWF0aW9uVGltZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7KGlzQW5pbWF0aW5nLCBzdGFydCwgcGF1c2UsIHJlc2V0QW5pbWF0aW9uKSA9PlxuICAgICAgICAgICAgICBzaG93VGltZVdpZGdldCA/IChcbiAgICAgICAgICAgICAgICA8VGltZVdpZGdldFxuICAgICAgICAgICAgICAgICAgLy8gVGltZVdpZGdldCB1c2VzIFJlYWN0Lm1lbW8sIGhlcmUgd2UgcGFzcyB3aWR0aFxuICAgICAgICAgICAgICAgICAgLy8gZXZlbiB0aG91Z2ggaXQgZG9lc250IHVzZSBpdCwgdG8gZm9yY2UgcmVyZW5kZXJcbiAgICAgICAgICAgICAgICAgIHdpZHRoPXtlbmxhcmdlZEZpbHRlcldpZHRofVxuICAgICAgICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJzW2VubGFyZ2VkRmlsdGVySWR4XX1cbiAgICAgICAgICAgICAgICAgIGluZGV4PXtlbmxhcmdlZEZpbHRlcklkeH1cbiAgICAgICAgICAgICAgICAgIGlzQW55RmlsdGVyQW5pbWF0aW5nPXtCb29sZWFuKGFuaW1hdGVkRmlsdGVyKX1cbiAgICAgICAgICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0c31cbiAgICAgICAgICAgICAgICAgIHJlYWRPbmx5PXtyZWFkT25seX1cbiAgICAgICAgICAgICAgICAgIHNob3dUaW1lRGlzcGxheT17c2hvd0Zsb2F0aW5nVGltZURpc3BsYXl9XG4gICAgICAgICAgICAgICAgICBzZXRGaWx0ZXJQbG90PXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyUGxvdH1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlcj17dmlzU3RhdGVBY3Rpb25zLnNldEZpbHRlcn1cbiAgICAgICAgICAgICAgICAgIHNldEZpbHRlckFuaW1hdGlvblRpbWU9e3Zpc1N0YXRlQWN0aW9ucy5zZXRGaWx0ZXJBbmltYXRpb25UaW1lfVxuICAgICAgICAgICAgICAgICAgc2V0RmlsdGVyQW5pbWF0aW9uV2luZG93PXt2aXNTdGF0ZUFjdGlvbnMuc2V0RmlsdGVyQW5pbWF0aW9uV2luZG93fVxuICAgICAgICAgICAgICAgICAgdG9nZ2xlQW5pbWF0aW9uPXt2aXNTdGF0ZUFjdGlvbnMudG9nZ2xlRmlsdGVyQW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgICAgdXBkYXRlQW5pbWF0aW9uU3BlZWQ9e3Zpc1N0YXRlQWN0aW9ucy51cGRhdGVGaWx0ZXJBbmltYXRpb25TcGVlZH1cbiAgICAgICAgICAgICAgICAgIGVubGFyZ2VGaWx0ZXI9e3Zpc1N0YXRlQWN0aW9ucy5lbmxhcmdlRmlsdGVyfVxuICAgICAgICAgICAgICAgICAgcmVzZXRBbmltYXRpb249e3Jlc2V0QW5pbWF0aW9ufVxuICAgICAgICAgICAgICAgICAgaXNBbmltYXRhYmxlPXshYW5pbWF0aW9uQ29uZmlnIHx8ICFhbmltYXRpb25Db25maWcuaXNBbmltYXRpbmd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L0ZpbHRlckFuaW1hdGlvbkNvbnRyb2xsZXI+XG4gICAgICAgICl9XG4gICAgICA8L0JvdHRvbVdpZGdldENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIEJvdHRvbVdpZGdldC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5cbiAgcmV0dXJuIEJvdHRvbVdpZGdldDtcbn1cbiJdfQ==