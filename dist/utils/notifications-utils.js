"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotification = createNotification;
exports.exportImageError = exports.successNotification = exports.errorNotification = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("./utils");

var _defaultSettings = require("../constants/default-settings");

var _userGuides = require("../constants/user-guides");

var _excluded = ["message", "type", "topic", "id"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates a notification
 * @param {object} opt
 * @param {string} opt.message - Message to display during the notification
 * @param {string} opt.type - The type of message. One of DEFAULT_NOTIFICATION_TYPES
 * @param {string} opt.topic - The topic the notification belongs to. One of DEFAULT_NOTIFICATION_TOPICS
 * @param {string} opt.id optional id for notification. If not provided it will be generated by the method
 * @param {object} opt.options - Extra parameters to store as part of hte notification
 * @returns {object}
 */
function createNotification(_ref) {
  var _ref$message = _ref.message,
      message = _ref$message === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_MESSAGE : _ref$message,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TYPES.info : _ref$type,
      _ref$topic = _ref.topic,
      topic = _ref$topic === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global : _ref$topic,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (0, _utils.generateHashId)(_defaultSettings.DEFAULT_UUID_COUNT) : _ref$id,
      options = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  return _objectSpread(_objectSpread({}, options), {}, {
    id: id,
    message: message,
    type: type,
    topic: topic
  });
}
/**
 * Creates an error notification
 * @param options
 * @returns {{topic, id, message, type: (null|number)}}
 */


var errorNotification = function errorNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.error
  });
};
/**
 * Creates a success notification
 * @param options
 * @returns {{topic, id, message, type: null}}
 */


exports.errorNotification = errorNotification;

var successNotification = function successNotification(options) {
  return _objectSpread(_objectSpread({}, createNotification(options)), {}, {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.success
  });
};

exports.successNotification = successNotification;

var exportImageError = function exportImageError(options) {
  return errorNotification(_objectSpread(_objectSpread({}, options), {}, {
    topic: _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global,
    message: "Failed to export image, please take a screenshot of the javascript console, report the with [this link](".concat(_userGuides.BUG_REPORT_LINK, ") ")
  }));
};

exports.exportImageError = exportImageError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ub3RpZmljYXRpb25zLXV0aWxzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFIiwidHlwZSIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTIiwiaW5mbyIsInRvcGljIiwiREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTIiwiZ2xvYmFsIiwiaWQiLCJERUZBVUxUX1VVSURfQ09VTlQiLCJvcHRpb25zIiwiZXJyb3JOb3RpZmljYXRpb24iLCJlcnJvciIsInN1Y2Nlc3NOb3RpZmljYXRpb24iLCJzdWNjZXNzIiwiZXhwb3J0SW1hZ2VFcnJvciIsIkJVR19SRVBPUlRfTElOSyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBRUE7O0FBT0E7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxrQkFBVCxPQU1KO0FBQUEsMEJBTERDLE9BS0M7QUFBQSxNQUxEQSxPQUtDLDZCQUxTQyw2Q0FLVDtBQUFBLHVCQUpEQyxJQUlDO0FBQUEsTUFKREEsSUFJQywwQkFKTUMsNENBQTJCQyxJQUlqQztBQUFBLHdCQUhEQyxLQUdDO0FBQUEsTUFIREEsS0FHQywyQkFIT0MsNkNBQTRCQyxNQUduQztBQUFBLHFCQUZEQyxFQUVDO0FBQUEsTUFGREEsRUFFQyx3QkFGSSwyQkFBZUMsbUNBQWYsQ0FFSjtBQUFBLE1BREVDLE9BQ0Y7QUFDRCx5Q0FDS0EsT0FETDtBQUVFRixJQUFBQSxFQUFFLEVBQUZBLEVBRkY7QUFHRVIsSUFBQUEsT0FBTyxFQUFQQSxPQUhGO0FBSUVFLElBQUFBLElBQUksRUFBSkEsSUFKRjtBQUtFRyxJQUFBQSxLQUFLLEVBQUxBO0FBTEY7QUFPRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLElBQU1NLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQUQsT0FBTztBQUFBLHlDQUNuQ1gsa0JBQWtCLENBQUNXLE9BQUQsQ0FEaUI7QUFFdENSLElBQUFBLElBQUksRUFBRUMsNENBQTJCUztBQUZLO0FBQUEsQ0FBakM7QUFLUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNPLElBQU1DLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsQ0FBQUgsT0FBTztBQUFBLHlDQUNyQ1gsa0JBQWtCLENBQUNXLE9BQUQsQ0FEbUI7QUFFeENSLElBQUFBLElBQUksRUFBRUMsNENBQTJCVztBQUZPO0FBQUEsQ0FBbkM7Ozs7QUFLQSxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFMLE9BQU87QUFBQSxTQUNyQ0MsaUJBQWlCLGlDQUNaRCxPQURZO0FBRWZMLElBQUFBLEtBQUssRUFBRUMsNkNBQTRCQyxNQUZwQjtBQUdmUCxJQUFBQSxPQUFPLG9IQUE2R2dCLDJCQUE3RztBQUhRLEtBRG9CO0FBQUEsQ0FBaEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjEgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2dlbmVyYXRlSGFzaElkfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHtcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fTUVTU0FHRSxcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTLFxuICBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUyxcbiAgREVGQVVMVF9VVUlEX0NPVU5UXG59IGZyb20gJ2NvbnN0YW50cy9kZWZhdWx0LXNldHRpbmdzJztcblxuaW1wb3J0IHtCVUdfUkVQT1JUX0xJTkt9IGZyb20gJ2NvbnN0YW50cy91c2VyLWd1aWRlcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIHtvYmplY3R9IG9wdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdC5tZXNzYWdlIC0gTWVzc2FnZSB0byBkaXNwbGF5IGR1cmluZyB0aGUgbm90aWZpY2F0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0LnR5cGUgLSBUaGUgdHlwZSBvZiBtZXNzYWdlLiBPbmUgb2YgREVGQVVMVF9OT1RJRklDQVRJT05fVFlQRVNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHQudG9waWMgLSBUaGUgdG9waWMgdGhlIG5vdGlmaWNhdGlvbiBiZWxvbmdzIHRvLiBPbmUgb2YgREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0LmlkIG9wdGlvbmFsIGlkIGZvciBub3RpZmljYXRpb24uIElmIG5vdCBwcm92aWRlZCBpdCB3aWxsIGJlIGdlbmVyYXRlZCBieSB0aGUgbWV0aG9kXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0Lm9wdGlvbnMgLSBFeHRyYSBwYXJhbWV0ZXJzIHRvIHN0b3JlIGFzIHBhcnQgb2YgaHRlIG5vdGlmaWNhdGlvblxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbih7XG4gIG1lc3NhZ2UgPSBERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFLFxuICB0eXBlID0gREVGQVVMVF9OT1RJRklDQVRJT05fVFlQRVMuaW5mbyxcbiAgdG9waWMgPSBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1MuZ2xvYmFsLFxuICBpZCA9IGdlbmVyYXRlSGFzaElkKERFRkFVTFRfVVVJRF9DT1VOVCksXG4gIC4uLm9wdGlvbnNcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5vcHRpb25zLFxuICAgIGlkLFxuICAgIG1lc3NhZ2UsXG4gICAgdHlwZSxcbiAgICB0b3BpY1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gZXJyb3Igbm90aWZpY2F0aW9uXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHJldHVybnMge3t0b3BpYywgaWQsIG1lc3NhZ2UsIHR5cGU6IChudWxsfG51bWJlcil9fVxuICovXG5leHBvcnQgY29uc3QgZXJyb3JOb3RpZmljYXRpb24gPSBvcHRpb25zID0+ICh7XG4gIC4uLmNyZWF0ZU5vdGlmaWNhdGlvbihvcHRpb25zKSxcbiAgdHlwZTogREVGQVVMVF9OT1RJRklDQVRJT05fVFlQRVMuZXJyb3Jcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdWNjZXNzIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm5zIHt7dG9waWMsIGlkLCBtZXNzYWdlLCB0eXBlOiBudWxsfX1cbiAqL1xuZXhwb3J0IGNvbnN0IHN1Y2Nlc3NOb3RpZmljYXRpb24gPSBvcHRpb25zID0+ICh7XG4gIC4uLmNyZWF0ZU5vdGlmaWNhdGlvbihvcHRpb25zKSxcbiAgdHlwZTogREVGQVVMVF9OT1RJRklDQVRJT05fVFlQRVMuc3VjY2Vzc1xufSk7XG5cbmV4cG9ydCBjb25zdCBleHBvcnRJbWFnZUVycm9yID0gb3B0aW9ucyA9PlxuICBlcnJvck5vdGlmaWNhdGlvbih7XG4gICAgLi4ub3B0aW9ucyxcbiAgICB0b3BpYzogREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTLmdsb2JhbCxcbiAgICBtZXNzYWdlOiBgRmFpbGVkIHRvIGV4cG9ydCBpbWFnZSwgcGxlYXNlIHRha2UgYSBzY3JlZW5zaG90IG9mIHRoZSBqYXZhc2NyaXB0IGNvbnNvbGUsIHJlcG9ydCB0aGUgd2l0aCBbdGhpcyBsaW5rXSgke0JVR19SRVBPUlRfTElOS30pIGBcbiAgfSk7XG4iXX0=